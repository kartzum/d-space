// Общие замечания.
// Правила и договоренности по разработки должны быть известны и изложены до начала работы.
// При этом можно было бы сразу избежать базовых ошибок. К примеру, именование класса: MyActivity.
// Должна быть поставлена задача с четким описанием критериев завершения работы.
// Должнен быть представлен макет.
// Сроки.

class MyActivity: Activity() {
    private val context = applicationContext // Удалить! Глобальные переменные уровня приложения не должны сохраняться в полях класса.
    // Подробнее: https://stackoverflow.com/questions/987072/using-application-context-everywhere

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // В данном случае для формирования визуальных компонентов необходимо воспользоваться стандартным подходом.
        // Подробнее: https://developer.android.com/guide/topics/ui/declaring-layout
        // (Безусловно, правила формирования визуальных компонентов, цвета, отступы и п.р.
        // должны быть описаны во внутренних ресурсах - вики.
        // Предпочтительно сформировать собственную библиотеку с визуальными компонентами и
        // вариантами их совмесной компоновки. Если, по каким-то причинам, библиотека не испоьзуется,
        // то необходимы примеры со стандартными компонентами с цветами и п.р.)

        val rootView = LinearLayout(context).apply {
            orientation = LinearLayout.VERTICAL
        }
        setContentView(rootView)

        // Размеры визуальных элементов не должны задаваться константами.
        // Это должно задаваться в общей библиотеке, при использовании.
        val button = Button(context).apply {
            //...
        }
        rootView.addView(button)

        val imageView = ImageView(context).apply {
            //...
        }
        rootView.addView(imageView)

        // Для обработки событий от пользователя и реализации логики компонента
        // необходимо воспользоваться подходом по разделению визуализации и логики.
        // В данном случае можно воспользоваться таким шаблоном как MVC.
        // (Безусловно, выбранный подход должен быть принят командой и
        // описан во внутренних ресурсах - вики.)
        // Подробнее: https://www.geeksforgeeks.org/mvc-model-view-controller-architecture-pattern-in-android-with-example/
        // (Можно воспользоваться и другим шаблоном. К примеру, MVVM.
        // https://medium.com/@er.ankitbisht/mvvm-model-view-viewmodel-kotlin-google-jetpack-f02ec7754854)
        // Таким образом логика выбора изображения переходит в Controller.
        // Изображение храниться в Model.
        // При этом можно легко написать unit-tests, как для Controller, так и для Model.
        // Если это понадобиться.

        button.setOnClickListener {
            // Скорее всего здесь может возникнуть проблема с разрешениями. Нужно проверить и скорректировать!
            val downloads = //...
            // ".jpg" -  необходимо воспользоваться стандартным компонентом из внутренней
            // библиотеки для загрузки изображений.
            val files = //...
            files.forEach {
                //...
            }
            // Для нотификации пользователя об ошибках необходимо воспользоваться стандартными подходами,
            // к примеру, вспылвающие подсказки.
            // Все текстовые сообщения необходимо оформить в виде отдельного компонента.
            // Возможно, понадобиться локализация.
            // Выбрасывание ошибки в этом месте может привести к нежелательным побочным эффектам.
            throw RuntimeException("...")
        }
    }
}